//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Amethyst_game_engine {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Amethyst_game_engine.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Byte[].
        /// </summary>
        internal static byte[] BlinnPhongFuncs {
            get {
                object obj = ResourceManager.GetObject("BlinnPhongFuncs", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Byte[].
        /// </summary>
        internal static byte[] LambertianFuncs {
            get {
                object obj = ResourceManager.GetObject("LambertianFuncs", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Byte[].
        /// </summary>
        internal static byte[] Structures {
            get {
                object obj = ResourceManager.GetObject("Structures", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 330 core
        ///
        ///#ifdef USE_LIGHTING
        ///
        ///vec3 CalculateSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewPos, float specularStrength, int shininess) {
        ///    vec3 L = normalize(light.position - fragPos);
        ///    float theta = dot(L, normalize(light.direction));
        ///
        ///    float epsilon = light.innerCutOff - light.outerCutOff;
        ///    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);
        ///
        ///    float dist = length(vec3(light.position) - fragPos);
        ///    float attenuation = 1.0 / (light. [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string UniversalFragmentShader {
            get {
                return ResourceManager.GetString("UniversalFragmentShader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на #version 330 core
        ///
        ///layout (location = 0) in vec3 _position;
        ///
        ///#ifdef USE_MESH_MATRIX
        ///uniform mat4 _mesh;
        ///#endif
        ///
        ///uniform mat4 _model;
        ///uniform mat4 _view;
        ///uniform mat4 _projection;
        ///
        ///#ifdef USE_VERTEX_COLORS
        ///out vec4 VertexColor;
        ///layout (location = 1) in vec3 _vertexColor;
        ///#endif
        ///
        ///#ifdef USE_ALBEDO_MAP
        ///out vec2 AlbedoCoords;
        ///layout (location = 2) in vec2 _albedoCoords;
        ///#endif
        ///
        ///#ifdef USE_LIGHTING
        ///    layout (location = 3) in vec3 _normal;
        ///
        ///    #if defined(USE_GOURAND_SHADING_MODEL)
        ///
        /// [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string UniversalVertexShader {
            get {
                return ResourceManager.GetString("UniversalVertexShader", resourceCulture);
            }
        }
    }
}
