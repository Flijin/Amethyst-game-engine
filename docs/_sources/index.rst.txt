.. Amethyst Game Engine documentation master file, created by
   sphinx-quickstart on Sat Nov  2 01:54:20 2024.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Добро пожаловать в документацию Amethyst Game Engine!
================================================

.. toctree::
   :maxdepth: 2
   :caption: Contents:

Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`

Создание окна
-------------

Итак, самый главный элемент, необходимый для работы - это окно. Для его создания воспользуйтесь классом **Window**. Он имеет множество конструкторов и свойст,
для задания нужных настроек окну, вот некоторые из них:

* **Window(string title)** - данный конструктор создает полноэкранное окно с названием title
* **Window(int width, int height, string title)** - вы также можете задать нужные размеры окна

Для запуска приложения воспользуйтей методом **yourWindow.Run()**

После запуска сцены вы увидите черный экран. Все потому, что окну необходимо присвоить сцену по умолчанию (ту, которая запустится первой).
Сделать это можно в статическом свойстве **Window.Scene**. О создании сцены речь пойдет ниже.

Вы также можете поменять цвет окна по умолчанию, вызвав него метод **ChangeBackgroundColor(Vector3 color)** Он принимает цвет в нормализованной форме.

----


Обработка ошибок
----------------

Также важно отметить тему обработки ошибок. Так как по умолчанию консоль скрывается, при их возниктовении в клиентской части, приложение просто
будет закрываться. Для вывода ошибок воспользуйтей методом **SystemSettings.PrintErrorMessage(string message)**. Он позволяет вывести текст ошибки
и завершить процесс. Также, вы можете задать видимость консоли, воспользовавшись методом **SystemSettings.ShowWindow(int nCmdShow)**. Он принимает
значения двух видов: **SystemSettings.SW_SHOW** - для отображения консоли и **SystemSettings.SW_HIDE** - для скрытия

Создание сцены
--------------

Сцена является основным структурным блоком игры. В ней создаются игровые объекты и их механики. В данном игровом движке сцены представлены классом BaseScene.
Для создания сцены необходимо создать свой класс сцены и унаследовать его от **BaseScene**. Предварительно подключите **using Amethyst_game_engine.Core**. В
итоге у вас должно получиться:

.. code-block:: csharp

	using Amethyst_game_engine.Core;

	namespace Client;

	internal class ExampleScene : BaseScene
	{
	   public ExampleScene()
	   {

	   }
	}
В конструкторе вы сразу можете задать свойство **BackgroundColor** для цвета заднего фона сцены. Компоненты цвета RGB представлены в нормализованной форме от 0 до 1

.. code-block:: csharp

	BackgroundColor = new Vector3(1f, 0f, 0f); // Красный цвет

----

Сцена имеет 4 virtual метода для создания взаимодействий игровых объектов и механик

* **OnFrameUpdate()** - Вызывается при каждой отрисовке кадра
* **OnFixedTimeUpdate()** - Вызывается фиксированное число раз в секунду (по умолчанию 60). Чтобы задать свое значение- передайте его в конструктор BaseScene
* **OnSceneStart()** - Вызывается в момент создания сцены
* **OnSceneExit()** - Вызывается при выходе из сцены

----

Для работы с игровыми объектами сцены, она предоставляет следующие методы:

* **AddGameObject(StaticGameObject3D obj)** - Принимает игровой объект и добавляет его в сцену
* **RemoveGameObjects(Predicate<DrawableObject> predicate)** - Удаляет один или несколько игровых объектов из сцены. Принимает предикат - условие для удаления
* **GetGameObject(Predicate<DrawableObject> predicate)** - Позволяет получить один или несколько игровых объектов по предикату. Возвращает массив этих объектов

----

Если вы созданите сцену и добавите в неё объекты, то увидите пустой экран, залитый цветом сцены. Все потому, что для их отображения нужна как минимум одна камера.
Камеры позволяют настроить точку наблюдателя для игрового персонажа. Вот методы для взаимодействия с камерами:

* **AddCamera(Camera cam, string name)** - Метод для добавления камеры в сцену, дополнительно принимает ее имя
* **RemoveCamera(string name)** - Метод для удаления камеры. Принимает имя, заданное при добавлении
* **GetCamera(string name)** - Позволяет получить камеру по имени
* **AddControllerToCamera(StandartCameraController controller, string cameraName)** - Необходим для добавления контроллера камеры, принимает сам контроллер и имя камеры, для которой он нужен

.. important::
	Имена камер не должны повторяться. В ином случае вы столкнетесь с ошибкой

Зачастую игры состоят из множества сцен. И для того, чтобы сменить сцену, вам необходимо воспользоваться все тем же свойством **Window.Scene**. Вы можете сделать это
в методах сцены в любой момент, когда это необходимо